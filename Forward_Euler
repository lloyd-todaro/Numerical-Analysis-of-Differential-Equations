


%Forward Euler Method
function [y,t]=ForwardEuler(f,t0,T,y0,N)
%We take in all necesary variables
%f-ODE in the form of y'(t)=f(t,y(t))
%t0-The t-value at our initial point
%T-final time
%y0-initial value
%N-number of of steps 
%This will output y (a vector of y values making up the estimated solution)
%and t (a vector of time values, each assigned to the y values)
h=(T-t0)/N %h reprisents the t-length of one timestep
t=linspace(t0,T,N)
y=zeros(size(t)) %initialize solutions and initial value for the IVP
y(1)=y0
for i=1:(N-1)
    y(i+1)=y(i)+h*f(t(i),y(i))
end
%This loop iterates for N steps, timestepping by a value of h, in the
%direction of y'(t), where y(t) is the true solution
end
%example
f=@(t,y) cos(2*t)
t0=0
T=20
y0=0
N=1000

[y,t]=ForwardEuler(f, t0, T, y0, N)

plot(t,y)
xlabel('t')
ylabel('y(t)')
title('Approximate solution using Forward Euler Method')
