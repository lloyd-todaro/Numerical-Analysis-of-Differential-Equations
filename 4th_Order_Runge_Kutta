function [t,y] =Runge_Kutta_4(t0,y0,T,f,N)
%We take in all necesary variables
%f-ODE in the form of y'(t)=f(t,y(t))
%t0-The t-value at our initial point
%T-final time
%y0-initial value
%N-number of of steps 
%This will output y (a vector of y values making up the estimated solution)
%and t (a vector of time values, each assigned to the y values)
h=(T-t0)/N
t=linspace(t0,T,N)
y=zeros(size(t))
y(1)=y0
for i=1:(N-1)
    z1=f(t(i),y(i))%The only difference From Euler's Method 
    % is we take additional partial steps, giving us 4th order convergence
    z2=f(t(i)+h/2,y(i)+h/2*z1)
    z3=f(t(i)+h/2,y(i)+h/2*z2)
    z4=f(t(i),y(i)+h*z3)
    y(i+1)=y(i)+h/6*(z1+2*z2+2*z3+z4)
end

end
%example ODE
f=@(t,y) cos(t.^2)
t0=0
y0=0
T=10
N=1000
[t,y]=Runge_Kutta_4(t0,y0,T,f,N)
plot(t,y)
xlabel('t')
ylabel('y(t)')
title('Approximate Solution Using Ruge-Kutta 4th order method')
grid on
xline(0,'b--','LineWidth',1)
yline(0,'b--','LineWidth',1)
